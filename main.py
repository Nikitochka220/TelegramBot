from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
import json
import os

TOKEN = '8364031177:AAElNQeyoZTzaiR5vyRNHF5ui-fBxK9eN38'
ADMIN_CHAT_ID = 7216669628
CHANNEL_USERNAME = '@NonalyHelp'

user_state = {}
user_ids = {}
blocked_users = set()
orders = []

if os.path.exists("orders.json"):
    with open("orders.json", "r") as f:
        try:
            orders = json.load(f)
        except json.JSONDecodeError:
            orders = []

main_keyboard = InlineKeyboardMarkup([
    [
        InlineKeyboardButton("üé® –°–¥–µ–ª–∞—Ç—å –∞–≤—É", callback_data="make_ava"),
        InlineKeyboardButton("ü§ñ –°–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞", callback_data="make_bot")
    ],
    [
        InlineKeyboardButton("üåç –ö–∞—Ä—Ç–∞ RobloxStudio", callback_data="make_map"),
        InlineKeyboardButton("üåê –°–∞–π—Ç (HTML/CSS/JS)", callback_data="make_website")
    ],
    [
        InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review"),
        InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_orders")
    ]
])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_ids[user.username or str(user.id)] = user.id

    if user.id in blocked_users:
        await update.message.reply_text("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}!\n\nüí¨ –ß–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?\n\nüí° –ò–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ —É –Ω–∞—Å –ø–æ–∫–∞ –º–∞–ª–æ –ª—é–¥–µ–π, –≤—Å–µ —É—Å–ª—É–≥–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—Å —Å—Ç–∞–Ω–µ—Ç –±–æ–ª—å—à–µ ‚Äî –ø–µ—Ä–µ–π–¥—ë–º –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç üí∞",
        reply_markup=main_keyboard
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or str(user_id)

    if query.data == "make_ava":
        user_state[user_id] = "awaiting_ava_text"
        await query.message.reply_text("üé® –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–µ?")

    elif query.data == "make_bot":
        user_state[user_id] = "awaiting_bot_text"
        await query.message.reply_text("ü§ñ –ö–∞–∫–æ–π –±–æ—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω?")

    elif query.data == "make_map":
        user_state[user_id] = "awaiting_map_text"
        await query.message.reply_text("üåç –û–ø–∏—à–∏ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤ RobloxStudio")

    elif query.data == "make_website":
        user_state[user_id] = "awaiting_website_text"
        await query.message.reply_text("üåê –ß—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–∞–π—Ç?")

    elif query.data == "leave_review":
        user_state[user_id] = "awaiting_review"
        await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ü–æ—Å–ª–µ –æ—Ç–∑—ã–≤–∞ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç —Ç–≤–æ—é –æ—Ü–µ–Ω–∫—É (1-5):")

    elif query.data == "my_orders":
        my = [o for o in orders if o['user_id'] == user_id]
        if not my:
            await query.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        else:
            for i, o in enumerate(my, 1):
                status = o.get("status", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                await query.message.reply_text(f"{i}. {o['type']} ‚Äî {o['text']} ‚Äî {status}\nüìù –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∑–∞—è–≤–∫–∏, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
                user_state[user_id] = f"editing_{i-1}"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or str(user_id)
    text = update.message.text
    state = user_state.get(user_id)

    if state == "awaiting_review":
        context.user_data['review_text'] = text
        user_state[user_id] = "awaiting_rating"
        await update.message.reply_text("üìä –ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:")
        return

    if state == "awaiting_rating":
        if text not in ['1', '2', '3', '4', '5']:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
            return
        review = context.user_data.get('review_text', '')
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"‚≠ê –û—Ç–∑—ã–≤ –æ—Ç @{username}:\n{review}\n–û—Ü–µ–Ω–∫–∞: {text}/5"
        )
        await context.bot.send_message(
            chat_id=CHANNEL_USERNAME,
            text=f"üì£ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{username}:\n{review}\n–û—Ü–µ–Ω–∫–∞: {text}/5"
        )
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        user_state[user_id] = None
        return

    if state and state.startswith("awaiting_"):
        order_type = state.replace("awaiting_", "").replace("_text", "")
        new_order = {
            "user_id": user_id,
            "user": username,
            "type": order_type,
            "text": text,
            "status": "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        }
        orders.append(new_order)
        with open("orders.json", "w") as f:
            json.dump(orders, f)

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ [{order_type}] –æ—Ç @{username}:\n{text}"
        )
        await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!")
        user_state[user_id] = None

    elif state and state.startswith("editing_"):
        index = int(state.split("_")[1])
        if 0 <= index < len(orders) and orders[index]['user_id'] == user_id:
            orders[index]['text'] = text
            with open("orders.json", "w") as f:
                json.dump(orders, f)
            await update.message.reply_text("‚úèÔ∏è –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        user_state[user_id] = None

async def user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    users = {o['user']: o['user_id'] for o in orders}
    message = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ—Ñ–æ—Ä–º–ª—è–≤—à–∏–µ –∑–∞—è–≤–∫–∏:\n"
    for name, uid in users.items():
        message += f"@{name} ‚Äî {uid}\n"
    await update.message.reply_text(message)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞. –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    try:
        user_id = int(context.args[0])
        msg = " ".join(context.args[1:])
        await context.bot.send_message(chat_id=user_id, text=msg)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    msg = " ".join(context.args)
    sent = 0
    for uid in set(user_ids.values()):
        try:
            await context.bot.send_message(chat_id=uid, text=msg)
            sent += 1
        except:
            pass
    await update.message.reply_text(f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}.")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("user", user_command))
app.add_handler(CommandHandler("admin", admin_panel))
app.add_handler(CommandHandler("send", send_command))
app.add_handler(CommandHandler("broadcast", broadcast_command))
app.add_handler(CallbackQueryHandler(handle_button))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
